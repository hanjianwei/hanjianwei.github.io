<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Stone Horse</title><link>https://hanjianwei.com/tags/devops/</link><description>Recent content in devops on Stone Horse</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>blog@hanjianwei.com (Jianwei Han)</managingEditor><webMaster>blog@hanjianwei.com (Jianwei Han)</webMaster><lastBuildDate>Mon, 16 Feb 2015 20:04:00 +0800</lastBuildDate><atom:link href="https://hanjianwei.com/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>备份Mac AppStore中安装的应用</title><link>https://hanjianwei.com/2015/02/16/backup-mac-appstore-apps/</link><pubDate>Mon, 16 Feb 2015 20:04:00 +0800</pubDate><author>blog@hanjianwei.com (Jianwei Han)</author><guid>https://hanjianwei.com/2015/02/16/backup-mac-appstore-apps/</guid><description>在Mac中安装软件并不像Linux那么方便，它没有一个统一的软件管理器来处理大部分的情况。我同时用了Homebrew、Homebrew Cask和Mac AppStore来安装不同的软件。前者主要用于安装命令行程序，而后两者用于安装GUI程序。有些软件在Cask和AppStore中都有，以前我都是倾向于使用Cask，主要是</description></item><item><title>Nix: 纯函数式包管理器</title><link>https://hanjianwei.com/2014/09/21/nix-the-purely-functional-package-manager/</link><pubDate>Sun, 21 Sep 2014 20:04:00 +0800</pubDate><author>blog@hanjianwei.com (Jianwei Han)</author><guid>https://hanjianwei.com/2014/09/21/nix-the-purely-functional-package-manager/</guid><description>Nix是一个Linux/Unix下的包管理器，它支持原子升级和回滚、能够同时安装同一个包的多个版本、支持多用户，能够更加简单地搭建开发、构建环境。它最大的卖点在于 函数式 的管理方式：把软件包作为函数式语言的值，这些值由没有副作用的函数构建，一旦构建完就不再改变，这意味着你的软件运行环境一旦构建就不会改变——这对于可重现的</description></item><item><title>阿里云服务器的Docker配置</title><link>https://hanjianwei.com/2014/07/30/docker-on-aliyun/</link><pubDate>Wed, 30 Jul 2014 20:04:00 +0800</pubDate><author>blog@hanjianwei.com (Jianwei Han)</author><guid>https://hanjianwei.com/2014/07/30/docker-on-aliyun/</guid><description>最近把程序放到阿里云服务器上，并尝试用Docker来部署。阿里云的镜像列表里面已经有了Ubuntu 14.04 64位，可以直接安装Docker。然而，由于阿里云服务器的特殊情况，需要进行配置才能用。 安装完Docker之后，发现Docker服务并没有起来，检查日志发现有这么一段： [/var/lib/docker|3c476c9d] -job init_networkdriver() = ERR (1) Could not find a free IP address range for interface &amp;#39;docker0&amp;#39;. Please configure its address manually and run &amp;#39;docker -b</description></item><item><title>一袋烟功夫构建Mac环境</title><link>https://hanjianwei.com/2014/07/15/1-click-building-your-mac-environment/</link><pubDate>Tue, 15 Jul 2014 10:23:00 +0800</pubDate><author>blog@hanjianwei.com (Jianwei Han)</author><guid>https://hanjianwei.com/2014/07/15/1-click-building-your-mac-environment/</guid><description>最近硬盘不幸挂掉，换了新硬盘后重装系统、搭建环境真是一个痛苦的过程。尤其是后者，各种软件的配置、开发环境的设定，非常繁琐。这里索性总结一下，怎么能够将开发、应用的环境配置系统化，使得更换系统时能够迅速重建原来的环境。这里虽然是针对Mac来说的，对于Linux应该也类似。 作为一个开发者用户，我关心的数据主要有以下几类： 代</description></item><item><title>走马观花看Puppet</title><link>https://hanjianwei.com/2014/07/14/master-of-puppets/</link><pubDate>Mon, 14 Jul 2014 16:18:00 +0800</pubDate><author>blog@hanjianwei.com (Jianwei Han)</author><guid>https://hanjianwei.com/2014/07/14/master-of-puppets/</guid><description>Puppet是目前最流行的一套配置管理(Configuration Management，简称CM)系统。它提供了一套简洁、强大的框架，使系统管理的重用、分享更加简单，让系统配置更加自动化。在云计算时代，动辄需要配置大量主机，它的作用更加明显。 Puppet使用一种声明式的语言，和传统的脚本相比，你只需指定目标，而不必关注</description></item><item><title>Docker on Mac</title><link>https://hanjianwei.com/2014/06/06/docker-on-mac/</link><pubDate>Fri, 06 Jun 2014 15:58:00 +0800</pubDate><author>blog@hanjianwei.com (Jianwei Han)</author><guid>https://hanjianwei.com/2014/06/06/docker-on-mac/</guid><description>在虚拟化领域，Docker是一颗冉冉升起的新星。它构建于LXC之上，比传统的虚拟机技术相比，它没有操作系统层，因此更加轻量化，灵活性和可移植性也更好。 Docker有两个主要的部件：daemon和作为客户端的二进制程序「docker」。docker作为客户端，把相应指令发送给daemon来执行。因为Docker使用了Li</description></item></channel></rss>